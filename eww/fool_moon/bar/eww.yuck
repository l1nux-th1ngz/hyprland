(defvar eww "eww -c ~/.config/eww/fool_moon/bar")
(deflisten workspace "scripts/workspace")
(deflisten nvidia_listen "./scripts/nvidia.sh")
(deflisten window_listen "./scripts/window")
(defpoll updates_poll :initial "" :interval "1m" "./scripts/updates.sh &") 
(defwidget main []
  (box :class "bar"
    (left)
    (right)))
; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :valign "center"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget left[]
  (box :class "left"
       :space-evenly false
       :spacing 7 
       :halign "start"
    (start)
    (workspaces)
    (window-name)))

(defwidget right[]
  (box  :class "right" 
        :space-evenly false
        :spacing 7 
        :halign "end"
      (notifs)
      (sys)
      (nvidia)
      (ram)
      (cpu)
      (disk)
      (updates)
      (bat)
      (time)))

(defwidget main1 []
  (box :class "bar"
    (left1)
    (right1)))

(defwidget left1[]
  (box :class "left"
        :space-evenly false
        :spacing 7 
        :halign "start"
    (start1)
    (workspaces)
    (window-name)))

(defwidget right1[]
  (box  :class "right" 
        :space-evenly false
        :spacing 7 
        :halign "end"
    (notifs)
    (sys)
    (nvidia)
    (ram)
    (cpu)
    (disk)
    (updates)
    (bat)
    (time)))

(defwidget lbar[]
  (box :class "bar left-bar"
    (left)))

(defwidget rbar[]
  (box :class "bar right-bar"
    (right)))

(defwidget lbar1[]
  (box :class "bar left-bar"
    (left1)))

(defwidget rbar1[]
  (box :class "bar right-bar"
    (right1)))

(defwidget start[]
  (box :class "start-box" 
    (eventbox :class "start-eventbox"
              :onclick "scripts/widgets toggle-sys ; scripts/blank"
              :timeout "60s"
              ; :cursor "pointer"
              :valign "center"
      (box :class "start"
        (label :class "start-btn" :text "")))))

(defwidget start1[]
  (box :class "start-box" 
    (eventbox :class "start-eventbox"
              :onclick "scripts/widgets toggle-sys1 ; scripts/blank"
              :timeout "60s"
              ; :cursor "pointer"
              :valign "center"
      (box :class "start"
        (label :class "start-btn" :text "")))))

(defwidget workspaces []
  (literal
    :content workspace
  :valign "center"))

; (defwidget icon-module [icon ?class ?visible]
;   (box :class "${class} icon-module"
;         :orientation "h"
;         :valign "center"
;         :space-evenly false
;         :visible {visible ?: true} ; because the argument is optional
;     (label :class "icon-module__icon" :text "${icon}")
;     (children)))

(defwidget window-name []
  (box :class "window-box"
        :space-evenly false
        :style "min-width: ${strlength(window_listen) * 10}px;"
    (label :class "window-name-label" :text window_listen :limit-width 39)))

; (defwidget cava[]
;   (box :class "cava"
;         :valign "center"
;     (label :class "cava-label" :width 100 :text cava-bars)))
; 
; (deflisten cava-bars "scripts/cavabars")

(defwidget notifs[]
  (eventbox :class "notifs-eventbox"
            :tooltip "Notifications"
            :valign "center"
    (label :class "notifs-label" :text "  ${notif-count}")))

(deflisten notif-count :initial "0" "~/.local/.scripts/notifs count")

(defwidget sys[]
  (box :spacing 10
       :class "sys"
       :valign "center"
    (label :class "vol-icon" :text vol-icon)
    (label :class "wifi-icon ${wifi-class}" :text "")))

(defpoll vol-icon :interval "1s" "../common/scripts/vol icon")
(defpoll wifi-class :interval "1s" "scripts/wifi class")
(defpoll bat-icon :interval "1s" "scripts/bat icon")

(defwidget ram []
  (icon-module :class "ram" :icon " " :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))

(defwidget nvidia []
  (icon-module :class "nvidia" :icon " " 
    (label :text nvidia_listen))) 

(defwidget cpu []
  (icon-module :class "cpu" :icon " " 
    (label :text "${round(EWW_CPU.avg, 0)}%"))) 

(defwidget disk []
  (icon-module :class "disk" :icon " " 
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%"))) 

(defwidget updates []
  (icon-module :class "updates" :icon " " :visible {updates_poll != ""}
    (label :text updates_poll)))

(defwidget bat[]
  (eventbox :class "bat-eventbox"
            :onhover "${eww} update bat-vis=true"
            :onhoverlost "${eww} update bat-vis=false"
    (box :class "bat-box ${bat-class}"
         :orientation "v"
         :valign "center"
      (overlay
        (scale :class "bat-scale ${bat-class}" :active false :min 0 :max 101 :value bat-val)
        (box :orientation "v"
             :space-evenly false
             :valign "center"
          (revealer :class "bat-reveal" :reveal bat-vis
                    :transition "slideup"
                    :duration "550ms"
            (label :class "bat-label" :halign "center" :valign "center" :text "${bat-val}%"))
          (revealer :class "bat-reveal" :reveal {!bat-vis}
                    :transition "slideup"
                    :duration "550ms"
            (label :class "bat-icon" :halign "center" :valign "center" :height 25 :width 25 :text bat-icon)))))))

(defpoll bat-val :initial 0 :interval "1s" "scripts/bat level")
(defpoll bat-class :interval "1s" "scripts/bat class")
(defvar bat-vis false)

(defwidget time1[]
  (box :class "time-box"
       :halign "center"
       :valign "center"
    (eventbox :class "time-eventbox"
              :onclick "scripts/widgets toggle-time1 ; scripts/blank"
              :cursor "pointer"
      (label :class "time-label" :text "   ${time-lbl}"))))

(defwidget time[]
  (box :class "time-box"
        :halign "center"
        :valign "center"
    (eventbox :class "time-eventbox"
              :onclick "scripts/widgets toggle-time ; scripts/blank"
              :cursor "pointer"
      (label :class "time-label" :text "   ${time-lbl}"))))

(defpoll time-lbl :interval "1s" "date +'%I:%M'")

(defwindow bar0
  :monitor 0
  :geometry (geometry :x "0px" :y "0px" :width "100%" :height "50px" :anchor "top center")
  :stacking "fg"
  :hexpand false
  :vexpand false
  :exclusive false
  :windowtype "dock"
  (main))

(defwindow left_bar0
  :monitor 0
  :geometry (geometry :x "10px" :y "10px" :height "50px" :anchor "top center")
  :stacking "fg"
  :exclusive false
  (lbar))

(defwindow right_bar0 
  :monitor 0
  :geometry (geometry :x "-10px" :y "10px" :height "50px" :anchor "top center")
  :stacking "fg"
  :exclusive false
  (rbar))

(defwindow bar1 
  :monitor 1
  :geometry (geometry :x "0px" :y "0px" :width "100%" :height "48px" :anchor "top center")
  :stacking "fg"
  :hexpand false
  :vexpand false
  :exclusive false
  :windowtype "dock"
  (main1))

(defwindow left_bar1
  :monitor 1
  :geometry (geometry :x "10px" :y "10px" :height "48px" :anchor "top left")
  :stacking "fg"
  :exclusive false
  (lbar1))

(defwindow right_bar1 
  :monitor 1
  :geometry (geometry :x "-10px" :y "10px" :height "48px" :anchor "top right")
  :stacking "fg"
  :exclusive false
  (rbar1))
